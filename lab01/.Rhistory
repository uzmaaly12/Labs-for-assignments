score_median <- list("median" = median(scores),
score_max <- list("max" = max(scores),
score_min <- list("min" = min(scores))
summarystat <- function(scores)(mylist <- newlist
(score_mean <- list("mean"= mean(scores),
score_median <- list("median" = median(scores),
score_max <- list("max" = max(scores),
score_min <- list("min" = min(scores))
return(newlist)
print(mylist
return(mylist)
summarystat <- function(scores)(mylist <- list(score_mean <- list("mean"= mean(scores),
score_median <- list("median" = median(scores),
score_max <- list("max" = max(scores),
score_min <- list("min" = min(scores))
return(mylist)
return(mylist)
summarystat <- function(scores)
summarystat <- function(scores)
mylist <- list(score_mean <- list("mean"= mean(scores),
score_median <- list("median" = median(scores),
score_max <- list("max" = max(scores),
score_min <- list("min" = min(scores)))))
return(mylist)
summarystat <- function(scores)
{mylist <- list(score_mean <- list("mean"= mean(scores)
return(mylist)
summarystat <- function(scores)
mylist <- list("mean"= mean(scores)
return(mylist)
mylist
summarystat <- function(scores){
mylist <- list(mean(scores) )}
mylist
View(summarystat)
summarystat<- function(scores){scores <- list("mean" = mean(scores), "median" = median(scores), "Max" = max(scores), "Min" = min (scores))}
summarystat(scores)
return(scores)
View(summarystat)
x <- c (8,5,12,4,14,9,5,18)
new.staff <- function(name,year,post) {
result <- list(name=name, start.year=year, position=post)
class(result) <- "staff"
return(result)}
View(new.staff)
min(x)
new.function <- function(x){result <- list("mean" =mean(x))}
new.function <- function(x){result1 <- list("mean" =mean(x))}
return(result1)
y <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find Mean.
result.mean <- mean(y)
print(result.mean)
my_fun1 <- function(x, y) {           # R function with return
z <- x + y
return(z)
x <- c (8,5,12,4,14,9,5,18)
my_fun1 <- function(x) {           # R function with return
z <- x
return(z)
myTest <- function(x){z <- mean(x), median(x), max(x),min(x)}
myTest <- function(x){z <- list (mean(x), median(x), max(x),min(x))}
return(z)
myTest <- function(x){z <- list (mean(x), median(x), max(x),min(x))}
return(z)
myTest <- function(x){z <- list (mean(x), median(x), max(x),min(x))
return(z)}
myTest <- function(x){z <- list (mean(x), median(x), max(x),min(x))
return(z)}
View(myTest)
x <- c (8,5,12,4,14,9,5,18)
myTest <- function(x){z <- list (mean(x), median(x), max(x),min(x))
return(z)}
x <- c (8,5,12,4,14,9,5,18)
myTest <- function(x){z <- list (mean(x), median(x), max(x),min(x))
return(z)}
View(myTest)
myTest <- function(x){
z<- (mean(x)
return(z)}
myTest <- function(x){
z <- mean(x)
return(z)}
x <- c (8,5,12,4,14,9,5,18)
z
z
myTest <- function(x){
z <- mean(x)
return(z)
print(z)
function(z)
ean(x)
mean(x)
square_them_add <- function(a = 5, b = 2) {
squared_and_summed <- a^2 + b^2
return(squared_and_summed)}
square_them_add(4, 3)
square_them_add <- function(a = 5, b = 2) {
squared_and_summed <- a^2 + b^2
return(squared_and_summed)}
return(squared_and_summed)}
square_them_add(4, 3)
square_them_add(5, 2)
my.input <- c (3,4,5,6,7)
my.input <- c (3,4,5,6,7)
house <- function (my.input){ min(),median(),max(), min()
return(my.input)}
my.input <- c (3,4,5,6,7)
house <- function (my.input){ min(),median(),max(), min()
my.input <- c (3,4,5,6,7)
house <- function (my.input){list( min(),median(),max(), min())
return(my.input)}
my.input <- c (3,4,5,6,7)
house <- function (my.input){list( min(),median(),max(), min())
return(my.input)}
my.input <- c (3,4,5,6,7)
house <- function (my.input){list( min(),median(),max(), min())
return(my.input)}
View(house)
my.input <- c (3,4,5,6,7)
house <- function (my.input){list( min(my.input),median(my.input),max(my.input), min(my.input))
return(my.input)}
house <- function (my.input){mylist<- list( min(my.input),median(my.input),max(my.input), min(my.input))
return(mylist)}
return(mylist)}
my.input <- c (3,4,5,6,7)
house <- function (my.input)
return mean()}
ard <- function (a = 4, b= 3, c = 6)
card <- function (a = 4, b= 3, c = 6){mylist <- sort(a,b,c)}
house <- (1,2,3,4,5)
house <- c(1,2,3,4,5)
xm <- mean(house)
card <- function (house){mylist <-list(xm <- mean(house))}
xmed <- median(house)
xmed <- median(house)
xmax <- max(house)
xmin <- min(house)
}
card <- function (house){mylist <-list(xm <- mean(house)
xmed <- median(house)
xmax <- max(house)
xmin <- min(house))
}
card <- function (house){mylist <-list(xm <- mean(house), xmed <- median(house), xmax <- max(house), xmin <- min(house))}
card <- function (house){mylist <-list(xm <- mean(house), xmed <- median(house), xmax <- max(house), xmin <- min(house))
return(mylist)}
card <- function (house){mylist <-list(xm <- mean(house), xmed <- median(house), xmax <- max(house), xmin <- min(house), xsort <-sort(house))
return(mylist)}
house <- c(1,2,3,4,5)
card <- function (house){mylist <-list(xm <- mean(house), xmed <- median(house), xmax <- max(house), xmin <- min(house), xsort <-sort(house))
return(mylist)}
card <- function (house){mylist <-list(mean(), median(), max(), min ()))
return(mylist)}
card <- function (house){mylist <-list(mean(), median(), max(), min ()))
return(mylist)}
card <- function (house){mylist <-list(mean(), median(), max(), min ()}
return(mylist)}
square_them_add <- function(a = 5, b = 2) {
squared_and_summed <- a^2 + b^2
return(squared_and_summed)}
square_them_add(5, 2)
card <- function (house){mylist <-list(mean(), median(), max(), min ()}
return(mylist)}
square_them_add <- function(a = 5, b = 2) {
squared_and_summed <- a^2 + b^2
return(squared_and_summed)}
square_them_add(5, 2)
card <- function (house){mylist <-list(mean(), median(), max(), min ()}
marks <- c(1,2,3,4,5)
a <- function(marks){by<-list(mean(marks), median (marks))}
return(by)
marks <- c(1,2,3,4,5)
a <- function(marks){by=list(mean(marks), median (marks))}
return(by)
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in case
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
marks <- c(8,7,10,6,4,12)
mymarks <- function(marks){
meanM <- mean(marks)
meanM
medM <- median(marks)
medM
minM <-  min(marks)
minM
maxM <- max(marks)
maxM
markslist <- list( meanM, medM, minM, maxM)
markslist
sortM <-  sort(marks)
sortM }
Mylist <- list(markslist, sortM)
Mylist
marks <- c(8,7,10,6,4,12)
mymarks <- function(marks){
meanM <- mean(marks)
meanM
medM <- median(marks)
medM
minM <-  min(marks)
minM
maxM <- max(marks)
maxM
markslist <- list( meanM, medM, minM, maxM)
markslist
sortM <-  sort(marks)
sortM }
Mylist <- list(markslist, sortM)
meanM <- mean(marks)
meanM
medM <- median(marks)
medM
minM <-  min(marks)
minM
maxM <- max(marks)
maxM
markslist <- list( meanM, medM, minM, maxM)
markslist
sortM <-  sort(marks)
sortM }
sortM }
Mylist <- list(markslist, sortM)
Mylist
mymarks <- function(marks){
meanM <- mean(marks)
meanM
medM <- median(marks)
medM
minM <-  min(marks)
minM
maxM <- max(marks)
maxM
markslist <- list( meanM, medM, minM, maxM)
markslist
sortM <-  sort(marks)
sortM }
Mylist <- list(markslist, sortM)
Mylist
mymarks <- function(marks){
meanM <- mean(marks)
meanM
medM <- median(marks)
medM
minM <-  min(marks)
minM
maxM <- max(marks)
maxM
markslist <- list( meanM, medM, minM, maxM)
markslist
sortM <-  sort(marks)
sortM }
Mylist <- list(markslist, sortM)
Mylist
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
View(del.counties)
x <- c(8, 12, 8, 6, 9,10,5)
marks <- function(x){
meanx <- mean(x)
meanx
medx <- median(x)
medx
maxx <- max(x)
maxx
minx <- min(x)
minx
markslist <- list(meanx, medx, maxx, minx)
markslist
sortx <- sort(x)
sortx
mylist <- list(markslist, sortx)
mylist
}
meanx <- mean(x)
meanx
medx <- median(x)
medx
maxx <- max(x)
maxx
minx <- min(x)
minx
markslist <- list(meanx, medx, maxx, minx)
markslist
sortx <- sort(x)
sortx
mylist <- list(markslist, sortx)
mylist
NewYork <- d.counties %>% dplyr::filter(STATEFP10 == 36)
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
NewYork <- d.counties %>% dplyr::filter(STATEFP10 == 36)
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
d.counties <- sf::read_sf(p.counties)
## note the ".." as opposed to "." <- need to go back one additional level from where this file is
p.counties <- "../data/CBW/County_Boundaries.shp"
d.counties <- sf::read_sf(p.counties)
NewYork <- d.counties %>% dplyr::filter(STATEFP10 == 36)
meanNewYork_county<-mean(NYW$ALAND10)
meanNewYork_county<-mean(NYW$ALAND10)
meanNewYork_county<-mean(NewYork$ALAND10)
meanNewYork_county
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
#4.2 Calculate the average size of counties in New York (that are also in this study area)
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
d.stations %>% group_by(STAID) %>% count(d.stations$MAP_ID)
counties <- d.counties %>% group_by (STATEFP10)
counties <- sf::st_intersection(d.stations, counties)
counties <- d.counties %>% group_by (STATEFP10=n)
counties <- d.counties %>% group_by (STATEFP10)
counties.stations <- sf::st_intersection(d.stations, counties)
glimpse(counties.stations)
counties <- d.counties %>% dplyr::select(STATEFP10)
counties.stations <- sf::st_intersection(d.stations, counties)
counties <- d.counties %>% dplyr::select(STATEFP10)
counties.stations <- sf::st_intersection(d.stations, counties)
counties.stations <- sf::st_intersection(d.stations$MAP_ID)
counties <- d.counties %>% group_by(STAID) %>% count(d.stations$MAP_ID)
d.stations %>% group_by(STAID) %>% count(d.stations$MAP_ID)
d.stations$STATION_NA
statshortname<-d.stations %>% mutate (., namelength = nchar(d.stations$STATION_NA)==min(nchar(d.stations$STATION_NA)))
min(nchar(d.stations$STATION_NA))
ggplot(d.stations,aes(x=Drainage_A,fill= MAP_ID,color= "purple"))+geom_histogram() + labs(title = "Relationship between land area and water area")
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)
ggplot(d.counties,aes(x=ALAND10,y= AWATER10,colour=STATEFP10))+geom_point()+ labs(title = "Relationship between land area and water area")
d.stations %>% ggplot(., aes(x = Drainage_A)) + geom_histogram(aes(fill = MAP_ID)) + labs(title = "Drainage area for all monitoring stations")
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
Statewater<- d.counties %>% group_by (STATEFP10) %>% mutate (totalarea = sum(ALAND10 + AWATER10)) %>% mutate(largeWaterArea = (AWATER10/totalarea))
glimpse(Statewater)
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties = COUNTYFP10 )
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties =n())
ggplot(d.counties,aes(x=ALAND10,y= AWATER10,colour=STATEFP10))+geom_point()+ labs(title = "Relationship between land area and water area")
d.stations %>% ggplot(., aes(x = Drainage_A)) + geom_histogram(aes(fill = MAP_ID)) + labs(title = "Drainage area for all monitoring stations")
ggplot(d.stations,aes(x=Drainage_A,fill= MAP_ID,color= "purple"))+geom_histogram() + labs(title = "Relationship between land area and water area")
x <- c(8, 12, 8, 6, 9,10,5)
allcounties <- d.counties %>% dplyr::filter(STATEFP10)
del.stations <- sf::st_intersection(d.stations, allcounties)
allcounties <- d.counties %>% dplyr::filter(STATEFP10)
allcounties <- d.counties %>% dplyr::select(STATEFP10)
del.stations <- sf::st_intersection(d.stations, allcounties)
all.stations <- sf::st_intersection(d.stations, allcounties)
all.stations <- sf::st_intersection(d.stations, STATEFP10)
d.counties %>%
ggplot(., aes(x = Drainage_A)) +
geom_histogram(aes(fill = STATEFP10)) +
labs(title = "Relationship between land area and water area")
d.counties %>%
ggplot(., aes(x = Drainage_A)) +
geom_histogram(aes(fill = Map_ID)) +
labs(title = "Relationship between land area and water area")
all.stations <- sf::st_intersection(d.stations, allcounties)
d.stations %>%
ggplot(., aes(x = Drainage_A)) +
geom_histogram(aes(fill = Map_ID)) +
labs(title = "Relationship between land area and water area")
d.stations %>%
ggplot(., aes(x = Drainage_A)) +
geom_histogram(aes(fill = Map_ID)) +
labs(title = "Relationship between land area and water area")
d.counties %>%
ggplot(., aes(x = Drainage_A)) +
geom_histogram(aes(fill = STATEFP10)) +
labs(title = "Relationship between land area and water area")
allcounties <- d.counties %>% dplyr::select(STATEFP10)
all.stations <- sf::st_intersection(d.stations, allcounties)
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in case
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in case
ggplot(d.stations,aes(x=Drainage_A,fill= MAP_ID,color= "purple"))+geom_histogram() + labs(title = "Relationship between land area and water area")
d.stations %>% ggplot(., aes(x = Drainage_A)) + geom_histogram(aes(fill = MAP_ID)) + labs(title = "Drainage area for all monitoring stations")
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
ggplot(d.counties,aes(x=ALAND10,y= AWATER10,colour=STATEFP10))+geom_point()+ labs(title = "Relationship between land area and water area")
d.stations %>% ggplot(., aes(x = Drainage_A)) + geom_histogram(aes(fill = MAP_ID)) + labs(title = "Drainage area for all monitoring stations")
ggplot(d.stations,aes(x=Drainage_A,fill= MAP_ID,color= "purple"))+geom_histogram() + labs(title = "Relationship between land area and water area")
ggplot(d.stations,aes(x=Drainage_A,fill= MAJOR_WATE,color= "purple"))+geom_histogram() + labs(title = "Relationship between land area and water area")
View(d.stations)
d.stations %>% ggplot(., aes(x = Drainage_A)) + geom_histogram(aes(fill = MAP_ID)) + labs(title = "Drainage area for all monitoring stations")
ggplot(d.stations,aes(x=Drainage_A,fill= MAJOR_WATE,color= "purple"))+geom_histogram() + labs(title = "Relationship between land area and water area")
sf::st_intersection(d.stations, del.counties)
sf::st_intersection(del.counties, d.stations)
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in cas
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in cas
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in case
## note the ".." as opposed to "." <- need to go back one additional level from where this file is
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateTotalArea = sum(ALAND10 + AWATER10)) %>% mutate(LandAreaPercent=(ALAND10/StateTotalArea)*100)
glimpse (CountyArea)
Statewater<- d.counties %>% group_by (STATEFP10) %>% mutate (totalarea = sum(ALAND10 + AWATER10)) %>% mutate(largeWaterArea = (AWATER10/totalarea))
glimpse(Statewater)
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties = COUNTYFP10 )
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties =n())
#1.4 Which station has the shortest name (STATION_NA) in the study area?
d.stations$STATION_NA
statshortname<-d.stations %>% mutate (., namelength = nchar(d.stations$STATION_NA)==min(nchar(d.stations$STATION_NA)))
min(nchar(d.stations$STATION_NA))
ggplot(d.counties,aes(x=ALAND10,y= AWATER10,colour=STATEFP10))+geom_point()+ labs(title = "Relationship between land area and water area")
d.stations %>% ggplot(., aes(x = Drainage_A)) + geom_histogram(aes(fill = MAP_ID)) + labs(title = "Drainage area for all monitoring stations")
ggplot(d.stations,aes(x=Drainage_A,fill= MAJOR_WATE,color= "purple"))+geom_histogram() + labs(title = "Relationship between land area and water area")
ggplot(d.stations,aes(x=Drainage_A,fill= MAJOR_WATE))+geom_histogram() + labs(title = "Relationship between land area and water area")
Max_DA<-max(d.stations$Drainage_A)
Max_DA
sf::st_intersection(d.stations, del.counties)
sf::st_intersection(del.counties, d.stations)
d.stations <- sf::read_sf(p.stations)
d.counties <- sf::read_sf(p.counties)
#Q1.In using the intersection functions, are the following two statements equivalent? If not, explain how.
#Be sure to think about BOTH the spatial data structures AND the attribute data. Would your answer be different if we were using different types of data?
sf::st_intersection(d.stations, del.counties)
sf::st_intersection(del.counties, d.stations)
#Q1.In using the intersection functions, are the following two statements equivalent? If not, explain how.
#Be sure to think about BOTH the spatial data structures AND the attribute data. Would your answer be different if we were using different types of data?
sf::st_intersection(d.stations, del.counties)==sf::st_intersection(del.counties, d.stations)
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
#Q1.In using the intersection functions, are the following two statements equivalent? If not, explain how.
#Be sure to think about BOTH the spatial data structures AND the attribute data. Would your answer be different if we were using different types of data?
sf::st_intersection(d.stations, del.counties)==sf::st_intersection(del.counties, d.stations)
#Q1.In using the intersection functions, are the following two statements equivalent? If not, explain how.
#Be sure to think about BOTH the spatial data structures AND the attribute data. Would your answer be different if we were using different types of data?
sf::st_intersection(d.stations, del.counties)
sf::st_intersection(del.counties, d.stations)
sf::st_intersection(d.stations, del.counties)
d.stations %>% sf::st_crs()
d.counties %>% sf::st_crs()
sf::st_intersection(d.stations, del.counties)
sf::st_intersection(del.counties, d.stations)
sf::st_intersection(d.stations, del.counties) = sf::st_intersection(del.counties, d.stations)
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
#Q1.In using the intersection functions, are the following two statements equivalent? If not, explain how.
#Be sure to think about BOTH the spatial data structures AND the attribute data. Would your answer be different if we were using different types of data?
d.counties %>% sf::st_crs()==d.stations %>% sf::st_crs()
sf::st_intersection(d.stations, del.counties) = sf::st_intersection(del.counties, d.stations)
#Q1.In using the intersection functions, are the following two statements equivalent? If not, explain how.
#Be sure to think about BOTH the spatial data structures AND the attribute data. Would your answer be different if we were using different types of data?
d.counties %>% sf::st_crs()==d.stations %>% sf::st_crs()
sf::st_intersection(d.stations, del.counties) = sf::st_intersection(del.counties, d.stations)
sf::st_intersection(d.stations, del.counties) == sf::st_intersection(del.counties, d.stations)
## note the ".." as opposed to "." <- need to go back one additional level from where this file is
p.counties <- "../data/CBW/County_Boundaries.shp"
d.counties <- sf::read_sf(p.counties)
sf::st_intersection(d.stations, del.counties) == sf::st_intersection(del.counties, d.stations)
sf::st_intersection(d.stations, del.counties)
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
del.stations <- sf::st_intersection(d.stations, del.counties)
sf::st_intersection(d.stations, del.counties)
sf::st_intersection(del.counties, d.stations)
sf::st_intersection(d.stations, del.counties) == sf::st_intersection(del.counties, d.stations)
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
?st_crs()
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in case
## note the ".." as opposed to "." <- need to go back one additional level from where this file is
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateTotalArea = sum(ALAND10 + AWATER10)) %>% mutate(LandAreaPercent=(ALAND10/StateTotalArea)*100)
glimpse (CountyArea)
Statewater<- d.counties %>% group_by (STATEFP10) %>% mutate (totalarea = sum(ALAND10 + AWATER10)) %>% mutate(largeWaterArea = (AWATER10/totalarea))
glimpse(Statewater)
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties = COUNTYFP10 )
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties =n())
ggplot(d.counties,aes(x=ALAND10,y= AWATER10,colour=STATEFP10))+geom_point()+ labs(title = "Relationship between land area and water area")
