library(tidyverse)
library(raster)
library(sp)
library(sf)
library(tidyverse)
library(raster)
library(sp)
library(sf)
install.packages("raster")
myras <- raster::raster( "./data/path_to_raster/myraster.tif")
# read a raster
mypoints <- as(myraster,"SpatialPoints")
myras <- raster::raster( "./data/Fridaycard/ts_2018.0812_0818.L4.LCHMP3.CI.MAXIMUM_7day.tif")
install.packages("rgdal")
library(rgdal)
myras <- raster::raster( "./data/Fridaycard/ts_2018.0812_0818.L4.LCHMP3.CI.MAXIMUM_7day.tif")
# could be useful, maybe not
?raster
# read a raster
mypoints <- as(myraster,"SpatialPoints")
myras <- raster::raster( "./data/Fridaycard/ts_2018.0812_0818.L4.LCHMP3.CI.MAXIMUM_7day.tif")
myras <- raster::raster( "./data/Fridaycard/lake_stations.csv")
myras <- raster::raster( "./data/Fridaycard/lake_stations.csv")
algalbloom <-  "./data/Fridaycard/lake_stations.csv"
a.bloom <- sf::read_sf(algalbloom)
algalbloom <-  "./data/Fridaycard/lake_stations.csv"
algalbloom <-  "../data/Fridaycard/lake_stations.csv"
a.bloom <- sf::read_sf(algalbloom)
algalbloom <-  "../data/Fridaycard/ake_stations.shp"
algalbloom <-  "../data/Fridaycard/ake_stations.shp"
a.bloom <- sf::read_sf(algalbloom)
algalbloom <-  "../data/Fridaycard/lake_stations.shp"
a.bloom <- sf::read_sf(algalbloom)
lake_stations <-  "../data/Fridaycard/lake_stations.shp"
l.stations <- sf::read_sf(lake_stations)
View(a.bloom)
lake_champ <- "../data/Fridaycard/lake_champlain.shp"
l.champ <- sf :: read_sf (lake_champ)
bb_miss <- "../data/Fridaycard/bb_miss.shp"
b.miss <- sf :: read_sf(bb_miss)
View(b.miss)
View(l.champ)
library(tidyverse)
library(sf)
library(GISTools)
library(tmap)
library(tidyverse)
library(sf)
library(GISTools)
library(tmap)
streams <- sf::read_sf("./data/Streams_303_d_.shp")
streams <- sf::read_sf("./data/county boundries/Streams_303_d_.shp")
streams <- sf::read_sf("./data/countyboundries/Streams_303_d_.shp")
streams <- sf::read_sf("../data/Streams_303_d_.shp")
streams <- sf::read_sf("../data/county_boundries/Streams_303_d_.shp")
streams <- sf::read_sf("../data/Streams_303_d_.shp")
tm_shape(streams) + tm_lines()
View(streams)
counties <- sf::read_sf("./data/County_Boundaries-_Census.shp")
counties <- sf::read_sf("./data/County_Boundaries_Census.shp")
counties <- sf::read_sf("./data/County_Boundaries-_Census.shp")
counties <- sf::read_sf("./data/County_Boundaries-_Census.shp")
counties<- sf::read_sf("./data/County_Boundaries-_Census.shp")
counties<- sf::read_sf("../data/County_Boundaries-_Census.shp")
counties_areas <- sf::st_area(counties)
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
tm_shape(lc_303ds) + tm_lines()
streams <- sf::read_sf("../data/Streams_303_d_.shp")
tm_shape(streams) + tm_lines()
counties<- sf::read_sf("../data/County_Boundaries-_Census.shp")
counties_areas <- sf::st_area(counties)
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
tm_shape(lc_303ds) + tm_lines()
tm_shape(lc_303ds) + tm_lines(col ="blue")
lc_303ds <- sf::st_intersection(streams, lc)
lc_303ds <- sf::st_intersection(streams, lc)
parks <- sf::read_sf(
"./data/State_Park_Locations.shp")
parks <- sf::read_sf("./data/State_Park_Locations.shp")
parks <- sf::read_sf("../data/State_Park_Locations.shp")
lc_parks <- sf::st_intersection(parks, lc)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
tm_shape(streams) + tm_lines()
streams <- sf::read_sf("../data/Streams_303_d_.shp")
counties<- sf::read_sf("../data/County_Boundaries-_Census.shp")
counties_areas <- sf::st_area(counties)
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
View(lc_303ds)
library(tmap)
install.packages(tmap)
install.packages("tmap")
tm_shape(streams) + tm_lines()
streams <- sf::read_sf("../data/Streams_303_d_.shp")
library(GISTools)
install.packages("GISTools")
library(GISTools)
library(GISTools)
tm_shape(streams) + tm_lines()
library(tidyverse)
library(sf)
library(GISTools)
library(tmap)
streams <- sf::read_sf("../data/Streams_303_d_.shp")
tm_shape(streams) + tm_lines()
counties<- sf::read_sf("../data/County_Boundaries-_Census.shp")
counties_areas <- sf::st_area(counties)
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
tm_shape(lc_303ds) + tm_lines()
tm_shape(lc_303ds) + tm_lines(col ="blue")
parks <- sf::read_sf("../data/State_Park_Locations.shp")
lc_parks <- sf::st_intersection(parks, lc)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
lc_parks <- sf::st_intersection(parks, lc)
parks <- sf::read_sf("../data/State_Park_Locations.shp")
tm_shape(lc_303ds) + tm_lines(col ="blue")
parks <- sf::read_sf("../data/State_Park_Locations.shp")
lc_parks <- sf::st_intersection(parks, lc)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
tm_shape(lc_303ds) + tm_lines(col =  "Waterbody_") + tm_shape(lc_parks) + tm_dots(col =   "AreaName", size = 1)
streams <- sf::read_sf("../data/Streams_303_d_.shp")
View(lc_parks)
parks <- sf::st_buffer(streams <= 0.5)
tm_shape(streams) + tm_lines()
tm_shape(lc_303ds) + tm_lines(col =  "Waterbody_") + tm_shape(lc_parks) + tm_dots(col =   "AreaName", size = 1)
parks <- sf::st_buffer(streams, lc)
?st_intersection()
library(tidyverse)
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in case
## note the ".." as opposed to "." <- need to go back one additional level from where this file is
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
glimpse(d.counties)
glimpse(d.stations)
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(starts_with("C"))
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>%
%>% summarise(stateLandArea = sum(ALAND10))
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(STATEFP10) %>% summarise(stateLandArea = sum(ALAND10)
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>%
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(STATEFP10) %>%
summarise(stateLandArea = sum(ALAND10))
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(STATEFP10) %>%
summarise(stateLandArea = sum(ALAND10))
d.counties %>% ggplot(., aes(x = as.factor(STATEFP10), y = ALAND10)) + geom_boxplot(aes(fill = STATEFP10))
d.counties %>%
ggplot(., aes(x = ALAND10)) + geom_histogram(aes(fill = STATEFP10)) +
labs(title = "not the most useful plot, but you get the idea")
d.counties %>% ggplot(., aes(x = ALAND10)) + geom_histogram(aes(fill = STATEFP10)) + labs (title = "not the most useful plot, but you get the idea")
View(d.counties)
View(counties)
View(counties)
?mutate
#For each county, calculate its land area as percentage of the total area (land + water) for that state.
area<- d.counties %% group_by(STATEFP10) %% mutate(State_totalArea= sum(ALAND10))
#For each county, calculate its land area as percentage of the total area (land + water) for that state.
area<- d.counties %% group_by(STATEFP10) %% mutate(Totalarea=sum(ALAND10 + AWATER10))%% mutate(statearea=(ALAND10 + AWATER10*100))
#For each county, calculate its land area as percentage of the total area (land + water) for that state.
area<- d.counties %% group_by(STATEFP10) %% mutate(Totalarea=sum(ALAND10 + AWATER10))%% mutate(statearea=(ALAND10 + AWATER10*100))
#For each county, calculate its land area as percentage of the total area (land + water) for that state.
area<- d.counties %% group_by(STATEFP10) %% mutate(Totalarea=sum(ALAND10 + AWATER10))%% mutate(area=(ALAND10 + AWATER10*100))
#For each county, calculate its land area as percentage of the total area (land + water) for that state.
area<- d.counties %>% group_by(STATEFP10) %>% mutate(Totalarea=sum(ALAND10 + AWATER10))%>% mutate(area=(ALAND10 + AWATER10*100))
#For each county, calculate its land area as percentage of the total area (land + water) for that state.
area<- d.counties %>% group_by(STATEFP10) %>% mutate(Totalarea=sum(ALAND10 + AWATER10))%>% mutate(Totalarea=(ALAND10 + AWATER10*100))
library(tidyverse)
library(sf)
library(GISTools)
library(tmap)
install.packages("tmap")
install.packages("GISTools")
streams <- sf::read_sf("../data/Streams_303_d_.shp")
tm_shape(streams) + tm_lines()
counties<- sf::read_sf("../data/County_Boundaries-_Census.shp")
counties_areas <- sf::st_area(counties)
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
tm_shape(lc_303ds) + tm_lines()
tm_shape(lc_303ds) + tm_lines(col ="blue")
parks <- sf::read_sf("../data/State_Park_Locations.shp")
lc_parks <- sf::st_intersection(parks, lc)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
tm_shape(lc_303ds) + tm_lines(col =  "Waterbody_") + tm_shape(lc_parks) + tm_dots(col =   "AreaName", size = 1)
parks <- sf::st_buffer(streams, lc)
?st_intersection()
install.packages("tmap")
install.packages("GISTools")
install.packages("GISTools")
tm_shape(lc_303ds) + tm_lines(col =  "Waterbody_") + tm_shape(lc_parks) + tm_dots(col =   "AreaName", size = 1)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
lc_303ds <- sf::st_intersection(streams, lc)
tm_shape(lc_303ds) + tm_lines()
tm_shape(lc_303ds) + tm_lines(col ="blue")
streams <- sf::read_sf( "./data/Streams_303_d_.shp")
streams <- sf::read_sf(
"./data/Streams_303_d_.shp"
)
streams <- sf::read_sf( "../data/Streams_303_d_.shp")
counties <- sf::read_sf("../data/County_Boundaries-_Census.shp")
parks <- sf::read_sf( "./data/State_Park_Locations.shp")
parks <- sf::read_sf( "../data/State_Park_Locations.shp")
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
lc_parks <- sf::st_intersection(parks, lc)
lc_303ds <- sf::st_intersection(streams, lc)
allegedly.a.clip <- streams[lc,]
poly.areas(counties)
counties %>% as_Spatial() %>% poly.areas()
parks_p <- sf::st_transform(parks,26914)
parks_p <- sf::st_transform(parks,26914)
counties_p <- sf::st_transform(counties,26914)
counties %>% sf::st_transform(.,26914) %>% sf::st_area()
parks_p <- sf::st_transform(parks,WGS26914)
poly.areas(counties)
counties %>% as_Spatial() %>% poly.areas()
parks_p <- sf::st_transform(parks,26914)
library(sf)
parks_p <- sf::st_transform(parks,26914)
install.packages("GISTools")
install.packages("GISTools")
parks_p <- sf::st_transform(parks,26914)
parks_p <- sf::st_transform(parks,26914)
install.packages("GISTools")
st_crs(parks)
parks <- sf::read_sf("../data/State_Park_Locations.shp")
st_crs(parks)
parks_p <- sf::st_transform(parks,26914)
counties_p <- sf::st_transform(counties,26914)
streams <- sf::read_sf("../data/Streams_303_d_.shp")
tm_shape(streams) + tm_lines()
counties<- sf::read_sf("../data/County_Boundaries-_Census.shp")
counties_areas <- sf::st_area(counties)
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
tm_shape(lc_303ds) + tm_lines()
tm_shape(lc_303ds) + tm_lines(col ="blue")
parks <- sf::read_sf("../data/State_Park_Locations.shp")
lc_parks <- sf::st_intersection(parks, lc)
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
tm_shape(lc_303ds) + tm_lines(col =  "Waterbody_") + tm_shape(lc_parks) + tm_dots(col =   "AreaName", size = 1)
parks <- sf::st_buffer(streams, lc)
?st_intersection()
streams <- sf::read_sf( "../data/Streams_303_d_.shp")
counties <- sf::read_sf("../data/County_Boundaries-_Census.shp")
parks <- sf::read_sf( "../data/State_Park_Locations.shp")
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
lc_303ds <- sf::st_intersection(streams, lc)
lc_parks <- sf::st_intersection(parks, lc)
lc_303ds <- sf::st_intersection(streams, lc)
allegedly.a.clip <- streams[lc,]
poly.areas(counties)
counties %>% as_Spatial() %>% poly.areas()
parks_p <- sf::st_transform(parks,26914)
counties_p <- sf::st_transform(counties,26914)
counties %>% sf::st_transform(.,26914) %>% sf::st_area()
parks_p <- sf::st_transform(parks,26914)
counties_p <- sf::st_transform(counties,26914)
parks_p <- sf::st_transform(parks,26914)
counties_p <- sf::st_transform(counties,26914)
Coordinate Reference System
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in case
## note the ".." as opposed to "." <- need to go back one additional level from where this file is
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
glimpse(d.counties)
glimpse(d.stations)
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(LSAD10, AWATER10) %>% head()
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(starts_with("C"))
d.counties %>% group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(STATEFP10) %>% summarise(stateLandArea = sum(ALAND10))
View(d.counties)
View(d.counties)
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>% group_by(STATEFP10) %>% summarise(stateLandArea = sum(ALAND10))
d.counties %>% ggplot(., aes(x = as.factor(STATEFP10), y = ALAND10)) + geom_boxplot(aes(fill = STATEFP10))
d.counties %>% ggplot(., aes(x = ALAND10)) + geom_histogram(aes(fill = STATEFP10)) + labs (title = "not the most useful plot, but you get the idea")
#For each county, calculate its land area as percentage of the total area (land + water) for that state.
area<- d.counties %>% group_by(STATEFP10) %>% mutate(Totalarea=sum(ALAND10 + AWATER10))%>% mutate(Totalarea=(ALAND10 + AWATER10*100))
d.counties %>% sf::st_crs()
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
View(del.counties)
del.stations <- sf::st_intersection(d.stations, del.counties)
View(d.stations)
glimpse(del.stations)
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
del.stations <- sf::st_intersection(d.stations, del.counties)
glimpse(del.stations)
del.stations <- sf::st_intersection(d.stations, del.counties)
plot(del.stations)
del.counties %>% st_area()
CountyArea <- d.counties %>% group_by (STATEFP10)mutate( StateAreaprcnt = sum(ALAND10 + AWATER10))
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateAreaprcnt = sum(ALAND10 + AWATER10))
View(area)
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateArea = sum(ALAND10 + AWATER10))
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateArea = sum(ALAND10 + AWATER10) %>% mutate ( LandAreaPercent(ALAND10/StateArea)))
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateArea = sum(ALAND10 + AWATER10) %>% mutate(LandAreaPercent=(ALAND10/StateArea)*100))
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateArea = sum(ALAND10 + AWATER10)) %>% mutate(LandAreaPercent=(ALAND10/StateArea)*100)
View(area)
View(CountyArea)
glimpse (CountyArea)
Statewater<- d.counties %>% dplyr::select(COUNTYFP10) %>% head()
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateTotalArea = sum(ALAND10 + AWATER10)) %>% mutate(LandAreaPercent=(ALAND10/StateTotalArea)*100)
Statewater<- d.counties %>% group_by (COUNTYFP10) %>% mutate ( LargeAreaWater = (AWATER10/stateTotalArea) )
Statewater<- d.counties %>% group_by (STATEFP10) %>% mutate (LargeAreaWater = (AWATER10/stateTotalArea))
glimpse (CountyArea)
Statewater<- d.counties %>% group_by (STATEFP10) %>% mutate (LargeAreaWater = (AWATER10/stateTotalArea))
Statewater<- d.counties %>% group_by (STATEFP10) %>% mutate (totalarea = sum(ALAND10 + AWATER10)) %>% mutate(largeWaterArea = (AWATER10/totalarea))
glimpse(Statewater)
Count<-d.counties %>% group_by(STATEFP10)%>% count(COUNTYFP10)
countiesCount <- d.counties <- count(COUNTYFP10 )
countiesCount <- d.counties <- count(COUNTYFP10)
countiesCount <- d.counties <- count(STATEFP10)
countiesCount <- d.counties %>% count(STATEFP10)
countiesCount <- d.counties %>% group_by (STATEFP10)%>% mutate (countiesCount = count(COUNTYFP10) )
countiesCount <- d.counties %>% group_by (STATEFP10)%>% mutate (counties = count(COUNTYFP10) )
STATEFP10  %>% count(series)
d.counties %>% count(serialize(STATEFP10))
counts >- d.counties %>% count(serialize(STATEFP10))
counts >- d.counties %>%group_by (STATEFP10) %>% mutate (count(serialize(STATEFP10))
statescounts >- d.counties %>%group_by (STATEFP10) %>% mutate (count(serialize(STATEFP10))
count (STATEFP10)
countstates <- d.counties  %>% count(STATEFP10)
shortname <- d.stations %>% character(STATION_NA)
shortname <- d.stations %>% min(STATION_NA)
shortname <- d.stations %>% select(STATION_NA) %% mutate_if(length(STATION_NA = min(character())))
shortname <- d.stations %>% select(STATION_NA) %% mutate (shortestname = length( min(STATION_NA))
which(STATION_NA)== min(STATION_NA))
shortname <- d.stations %>% select(STATION_NA) %% mutate (shortestname = length( min(STATION_NA))
countstates <- d.counties <- which(STATION_NA)== min(STATION_NA))
shortname <- d.stations %>% select(STATION_NA) %% mutate (shortestname = length( min(STATION_NA))
d.counties <- which(STATION_NA)== min(STATION_NA))
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>%
#1.4 Which station has the shortest name (STATION_NA) in the study area?
shortname <- d.stations %>% select(STATION_NA) %% mutate (shortestname = length( min(STATION_NA))
d.counties <- which(STATION_NA)== min(STATION_NA))
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>%
#1.4 Which station has the shortest name (STATION_NA) in the study area?
shortname <- d.stations %>% select(STATION_NA) %% mutate (shortestname = length( min(STATION_NA))
d.counties <- which(STATION_NA)== min(STATION_NA))
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>%
#1.4 Which station has the shortest name (STATION_NA) in the study area?
shortname <- d.stations %>% select(STATION_NA) %% mutate (shortestname = length( min(STATION_NA))
d.counties <- which(STATION_NA)== min(STATION_NA))
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% count(STATEFP10)
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by (STATEFP10 =n())
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties =n())
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties =n())
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% count(STATEFP10)%>%summarise(totalcounties)
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties)
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties =n())
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(COUNTYFP10 = n ()))
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties = COUNTYFP10 )
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties = COUNTYFP10 = n () )
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties = (COUNTYFP10 = n())
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties=n())
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(COUNTYFP10 = n ()))
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties =n())
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% count(STATEFP10)%>% summarise(totalcounties = COUNTYFP10 )
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties = COUNTYFP10 )
x <-c(1, 0, -1)
x[2]
Numeric <- function (x){if (x >=  1 ){ print(  "A" )} else { print("B")  }}
for (i in x){ xy(i) }
library(tidyverse)
library(ggplot2) #technically included in tidyverse
library(sf)
library(sp)#just in case
p.counties <- "../data/CBW/County_Boundaries.shp"
p.stations <- "../data/CBW/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateTotalArea = sum(ALAND10 + AWATER10)) %>% mutate(LandAreaPercent=(ALAND10/StateTotalArea)*100)
Statewater<- d.counties %>% group_by (STATEFP10) %>% mutate (totalarea = sum(ALAND10 + AWATER10)) %>% mutate(largeWaterArea = (AWATER10/totalarea))
Statewater<- d.counties %>% group_by (STATEFP10) %>% mutate (totalarea = sum(ALAND10 + AWATER10)) %>% mutate(largeWaterArea = (AWATER10/totalarea))
glimpse(Statewater)
CountyArea <- d.counties %>% group_by (STATEFP10)%>% mutate( StateTotalArea = sum(ALAND10 + AWATER10)) %>% mutate(LandAreaPercent=(ALAND10/StateTotalArea)*100)
glimpse (CountyArea)
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties = COUNTYFP10 )
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties =n())
d.stations$STATION_NA
statshortname<-d.stations %>% mutate (., namelength = nchar(d.stations$STATION_NA)==min(nchar(d.stations$STATION_NA)))
min(nchar(d.stations$STATION_NA))
ggplot(d.counties,aes(x=ALAND10,y= AWATER10,colour=STATEFP10))+geom_point()+ labs(title = "Relationship between land area and water area")
d.stations %>% ggplot(., aes(x = Drainage_A)) + geom_histogram(aes(fill = MAP_ID)) + labs(title = "Drainage area for all monitoring stations")
ggplot(d.stations,aes(x=Drainage_A,fill= MAP_ID,color= "purple"))+geom_histogram() + labs(title = "Relationship between land area and water area")
A <- function(marks){mean(marks)
median(marks)
max(marks)
min(marks)
sort(marks) }
marks <- c(8,5,12,4,14,9,5,18)
A(marks)
sort(marks)
marks[1] >=14
Grades <-
function
(marks){
if
(marks >=
14
){
print(
"A"
)
}
else
{
print(
"B" ) }}
for
(i
in
marks){
Grades(i)}
x <-c(1, 0, -1)
x <-c(1, 0, -1)
x[2]
Numeric <- function (x){if (x >=  1 ){ print(  "A" )} else { print("B")  }}
for (i in x){ Numeric(i) }
#c(10, 100, 1000)
y <- c(10, 100, 1000)
y[3]
Numeric <- function (y){if (x >=  1 ){ print(  "Yes" )} else { print("No")  }}
for (i in y){ Numeric(i) }
#c(.1, .001, 1e8)
z<-c(.1, .001, 1e8)
z[3]
#c(10, 100, 1000)
y <- c(10, 100, 1000)
y[3]
Numeric <- function (y){if (x >= 100 ){ print(  "Yes" )} else { print("No")  }}
for (i in y){ Numeric(i) }
#c(10, 100, 1000)
y <- c(10, 100, 1000)
y[3]
Numeric <- function (y){if (x >= 10 ){ print(  "Yes" )} else { print("No")  }}
for (i in y){ Numeric(i) }
#c(10, 100, 1000)
y <- c(10, 100, 1000)
y[3]
Numeric <- function (y){if (x <= 100 ){ print(  "Yes" )} else { print("No")  }}
for (i in y){ Numeric(i) }
y <- c(10, 100, 1000)
y[3]
Numeric <- function (y){if (y <= 100 ){ print(  "Yes" )} else { print("No")  }}
for (i in y){ Numeric(i) }
z<-c(.1, .001, 1e8)
z[3]
Numeric <- function (z){if (z >=10 ){ print(  "Yes" )} else { print("No")  }}
for (i in z){ Numeric(i) }
e<- c("a", "b", "c")
e [1]
e<- c("a", "b", "c")
e [1]
Numeric <- function (e){if (e >=10 ){ print(  "TRUE" )} else { print("FALSE")  }}
for (i in z){ Numeric(i)}
NYW <- d.counties %>% dplyr::filter(STATEFP10 == 51)
meanNYW_county<-mean(NYW$ALAND10)
NewYork <- d.counties %>% dplyr::filter(STATEFP10 == 51)
meanNewYork_county<-mean(NYW$ALAND10)
meanNewYork_county
#Task 4: (slightly) more complex spatial analysis.
#4.1 Calculate the number of monitoring stations in each state
d.stations$STATEFP10
#Task 4: (slightly) more complex spatial analysis.
#4.1 Calculate the number of monitoring stations in each state
count(d.stations$STATEFP10)
d.stations$STATEFP10
d.stations$STAID
stations <- d.stations (count(d.stations$STAID))
d.stations %>% count(d.stations$STAID)
d.stations %>% count(d.stations$MAP_ID)
d.stations %>% count(d.stations$MAP_ID) %>% STAID
d.counties %>% as_tibble()%>% dplyr::select(-geometry)%>% group_by(STATEFP10) %>% summarise(totalcounties = COUNTYFP10 )
d.stations %>% count(d.stations$MAP_ID) group_by(STAID)
d.stations %>% count(d.stations$MAP_ID)%>% group_by(STAID)
d.stations %>% group_by(STAID)count%>% (d.stations$MAP_ID)
d.stations %>% group_by(STAID)count %>% (d.stations$MAP_ID)
d.stations %>% (d.stations$MAP_ID)
d.stations %>% (d.stations$MAP_ID)
d.stations %>% group_by(STAID) %>% count(d.stations$MAP_ID)
Max_DA
Max_DA<-max(d.stations$Drainage_A)
Max_DA
sf::st_intersection(d.stations, del.counties)==
sf::st_intersection(del.counties, d.stations)
